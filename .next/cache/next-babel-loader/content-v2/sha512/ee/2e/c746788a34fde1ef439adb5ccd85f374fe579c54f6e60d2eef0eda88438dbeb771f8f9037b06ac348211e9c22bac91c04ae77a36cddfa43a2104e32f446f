{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx\";\nimport Prismic from '@prismicio/client';\nimport { getPrismicClient } from '../../services/prismic';\nimport styles from './post.module.scss';\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { RichText } from 'prismic-dom';\nimport { useEffect, useState } from 'react';\nexport default function Post({\n  post\n}) {\n  console.log({\n    post\n  });\n  const {\n    0: timeToRead,\n    1: setTimeToRead\n  } = useState(0);\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  useEffect(() => {\n    const wordsArray = 0;\n    post.data.content.map(item => {\n      item.body.map(i => {\n        const words = i.split(' ');\n      });\n    });\n  }, [post]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: styles.banner,\n      src: post.data.banner.url,\n      alt: \"banner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.info,\n        children: [/*#__PURE__*/_jsxDEV(\"time\", {\n          children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n            locale: ptBR\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), post.data.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(FiClock, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), \"4 min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), post.data.content.map((content, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: content.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.postContent,\n            dangerouslySetInnerHTML: {\n              __html: content.body\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([Prismic.predicates.at('document.type', 'post')], {\n    pageSize: 1\n  });\n  console.log(posts);\n  const paths = posts.results.map(item => {\n    return {\n      params: {\n        slug: item.uid\n      }\n    };\n  });\n  console.log(paths);\n  return {\n    paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: {\n        url: response.data.banner.url\n      },\n      author: response.data.author,\n      content: response.data.content.map(cont => {\n        return {\n          heading: cont.heading,\n          body: RichText.asHtml(cont.body)\n        };\n      })\n    },\n    first_publication_date: response.first_publication_date\n  };\n  return {\n    props: {\n      post\n    }\n  };\n};","map":{"version":3,"sources":["/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx"],"names":["Prismic","getPrismicClient","styles","Header","FiCalendar","FiClock","FiUser","format","ptBR","RichText","useEffect","useState","Post","post","console","log","timeToRead","setTimeToRead","wordsArray","data","content","map","item","body","i","words","split","banner","url","title","info","Date","first_publication_date","locale","author","index","heading","postContent","__html","getStaticPaths","prismic","posts","query","predicates","at","pageSize","paths","results","params","slug","uid","fallback","getStaticProps","response","getByUID","String","cont","asHtml","props"],"mappings":"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","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport { useRouter } from 'next/router';\nimport Prismic from '@prismicio/client';\n\nimport { getPrismicClient } from '../../services/prismic';\n\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\n\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { RichText } from 'prismic-dom';\nimport { useEffect, useState } from 'react';\n\ninterface Post {\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n}\n\nexport default function Post({ post }: PostProps) {\n  console.log({ post });\n  const [timeToRead, setTimeToRead] = useState(0);\n  if (!post) {\n    return <h1>Carregando...</h1>;\n  }\n  useEffect(() => {\n    const wordsArray = 0;\n    post.data.content.map(item => {\n      item.body.map(i => {\n        const words = i.split(' ');\n      });\n    });\n  }, [post]);\n  return (\n    <>\n      <Header />\n      <img className={styles.banner} src={post.data.banner.url} alt=\"banner\" />\n      <main>\n        <h1>{post.data.title}</h1>\n        <div className={styles.info}>\n          <time>\n            <FiCalendar />\n            {format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n              locale: ptBR,\n            })}\n          </time>\n          <span>\n            <FiUser />\n            {post.data.author}\n          </span>\n          <span>\n            <FiClock />4 min\n          </span>\n        </div>\n        {post.data.content.map((content, index) => {\n          return (\n            <div key={index}>\n              <h1>{content.heading}</h1>\n              <div\n                className={styles.postContent}\n                dangerouslySetInnerHTML={{ __html: content.body }}\n              ></div>\n            </div>\n          );\n        })}\n      </main>\n    </>\n  );\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query(\n    [Prismic.predicates.at('document.type', 'post')],\n    { pageSize: 1 }\n  );\n  console.log(posts);\n\n  const paths = posts.results.map(item => {\n    return { params: { slug: item.uid } };\n  });\n  console.log(paths);\n\n  return { paths, fallback: true };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { slug } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: {\n        url: response.data.banner.url,\n      },\n      author: response.data.author,\n      content: response.data.content.map(cont => {\n        return {\n          heading: cont.heading,\n          body: RichText.asHtml(cont.body),\n        };\n      }),\n    },\n    first_publication_date: response.first_publication_date,\n  };\n  return {\n    props: {\n      post,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}