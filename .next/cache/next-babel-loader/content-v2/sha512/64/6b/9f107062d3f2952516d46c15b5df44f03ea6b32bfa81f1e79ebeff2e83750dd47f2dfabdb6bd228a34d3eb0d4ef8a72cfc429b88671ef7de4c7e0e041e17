{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx\";\nexport var __N_SSG = true;\nexport default function Post(_ref) {\n  var params = _ref.params;\n  console.log({\n    params: params\n  });\n  return /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n}\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx"],"names":["Post","params","console","log"],"mappings":";;;AA8BA,eAAe,SAASA,IAAT,OAA+B;AAAA,MAAfC,MAAe,QAAfA,MAAe;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA,MAAM,EAANA;AAAF,GAAZ;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;KAHuBD,I","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport { useRouter } from 'next/router';\nimport Prismic from '@prismicio/client';\n\nimport { getPrismicClient } from '../../services/prismic';\n\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\n\ninterface Post {\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n}\n\nexport default function Post({ params }: any) {\n  console.log({ params });\n  return <h1></h1>;\n}\n\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query(\n    [Prismic.predicates.at('document.type', 'post')],\n    { pageSize: 1 }\n  );\n  console.log(posts);\n\n  return { paths: [], fallback: 'blocking' };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const prismic = getPrismicClient();\n  // const response = await prismic.getByUID('TODO');\n\n  return {\n    props: {\n      params,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}