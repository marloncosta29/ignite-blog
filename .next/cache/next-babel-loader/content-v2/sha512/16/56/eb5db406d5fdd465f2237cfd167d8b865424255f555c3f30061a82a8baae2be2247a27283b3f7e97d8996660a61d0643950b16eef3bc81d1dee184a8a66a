{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx\";\nimport styles from './post.module.scss';\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nexport var __N_SSG = true;\nexport default function Post(_ref) {\n  var _this = this;\n\n  var post = _ref.post;\n  console.log({\n    post: post\n  });\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: styles.banner,\n      src: post.data.banner.url,\n      alt: \"banner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.info,\n        children: [/*#__PURE__*/_jsxDEV(\"time\", {\n          children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n            locale: ptBR\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), post.data.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(FiClock, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), \"4 min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), post.data.content.map(function (content, index) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: content.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.postContent,\n            dangerouslySetInnerHTML: {\n              __html: content.body\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, _this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx"],"names":["styles","Header","FiCalendar","FiClock","FiUser","format","ptBR","Post","post","console","log","banner","data","url","title","info","Date","first_publication_date","locale","author","content","map","index","heading","postContent","__html","body"],"mappings":";;;AAOA,OAAOA,MAAP,MAAmB,oBAAnB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,MAA9B,QAA4C,gBAA5C;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAwBA,eAAe,SAASC,IAAT,OAAmC;AAAA;;AAAA,MAAnBC,IAAmB,QAAnBA,IAAmB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA,IAAI,EAAJA;AAAF,GAAZ;;AACA,MAAI,CAACA,IAAL,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAER,MAAM,CAACW,MAAvB;AAA+B,MAAA,GAAG,EAAEH,IAAI,CAACI,IAAL,CAAUD,MAAV,CAAiBE,GAArD;AAA0D,MAAA,GAAG,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BACE;AAAA,kBAAKL,IAAI,CAACI,IAAL,CAAUE;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAEd,MAAM,CAACe,IAAvB;AAAA,gCACE;AAAA,kCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGV,MAAM,CAAC,IAAIW,IAAJ,CAASR,IAAI,CAACS,sBAAd,CAAD,EAAwC,aAAxC,EAAuD;AAC5DC,YAAAA,MAAM,EAAEZ;AADoD,WAAvD,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,kCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGE,IAAI,CAACI,IAAL,CAAUO,MAFb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAWE;AAAA,kCACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAiBGX,IAAI,CAACI,IAAL,CAAUQ,OAAV,CAAkBC,GAAlB,CAAsB,UAACD,OAAD,EAAUE,KAAV,EAAoB;AACzC,4BACE;AAAA,kCACE;AAAA,sBAAKF,OAAO,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AACE,YAAA,SAAS,EAAEvB,MAAM,CAACwB,WADpB;AAEE,YAAA,uBAAuB,EAAE;AAAEC,cAAAA,MAAM,EAAEL,OAAO,CAACM;AAAlB;AAF3B;AAAA;AAAA;AAAA;AAAA,mBAFF;AAAA,WAAUJ,KAAV;AAAA;AAAA;AAAA;AAAA,iBADF;AASD,OAVA,CAjBH;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAmCD;KAzCuBf,I","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport { useRouter } from 'next/router';\nimport Prismic from '@prismicio/client';\n\nimport { getPrismicClient } from '../../services/prismic';\n\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\n\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { RichText } from 'prismic-dom';\n\ninterface Post {\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n}\n\nexport default function Post({ post }: PostProps) {\n  console.log({ post });\n  if (!post) {\n    return <h1>Carregando...</h1>;\n  }\n\n  return (\n    <>\n      <Header />\n      <img className={styles.banner} src={post.data.banner.url} alt=\"banner\" />\n      <main>\n        <h1>{post.data.title}</h1>\n        <div className={styles.info}>\n          <time>\n            <FiCalendar />\n            {format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n              locale: ptBR,\n            })}\n          </time>\n          <span>\n            <FiUser />\n            {post.data.author}\n          </span>\n          <span>\n            <FiClock />4 min\n          </span>\n        </div>\n        {post.data.content.map((content, index) => {\n          return (\n            <div key={index}>\n              <h1>{content.heading}</h1>\n              <div\n                className={styles.postContent}\n                dangerouslySetInnerHTML={{ __html: content.body }}\n              ></div>\n            </div>\n          );\n        })}\n      </main>\n    </>\n  );\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query(\n    [Prismic.predicates.at('document.type', 'post')],\n    { pageSize: 1 }\n  );\n  console.log(posts);\n\n  const paths = posts.results.map(item => {\n    return { params: { slug: item.uid } };\n  });\n  console.log(paths);\n\n  return { paths, fallback: true };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { slug } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: {\n        url: response.data.banner.url,\n      },\n      author: response.data.author,\n      content: response.data.content.map(cont => {\n        return {\n          heading: cont.heading,\n          body: RichText.asHtml(cont.body),\n        };\n      }),\n    },\n    first_publication_date: response.first_publication_date,\n  };\n  return {\n    props: {\n      post,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}