{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Prismic from '@prismicio/client';\nimport { getPrismicClient } from '../../services/prismic';\nimport styles from './post.module.scss';\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format, addSeconds } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { RichText } from 'prismic-dom';\nimport { useEffect, useState } from 'react';\n\nfunction formattedTime(seconds) {\n  var helperDate = addSeconds(new Date(0), seconds);\n  return format(helperDate, 'mm:ss');\n}\n\nexport default function Post({\n  post\n}) {\n  console.log({\n    post\n  });\n  const {\n    0: timeToRead,\n    1: setTimeToRead\n  } = useState(0);\n  useEffect(() => {\n    if (post) {\n      const contentText = [];\n      post.data.content.map(content => {\n        contentText.push(RichText.asText(content.body));\n      });\n      const totalWords = contentText.join(' ').split(' ').length;\n      setTimeToRead(totalWords / 200 * 60);\n    }\n  }, [post]);\n\n  if (!post) {\n    return /*#__PURE__*/_jsx(\"h1\", {\n      children: \"Carregando...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Header, {}), /*#__PURE__*/_jsx(\"img\", {\n      className: styles.banner,\n      src: post.data.banner.url,\n      alt: \"banner\"\n    }), /*#__PURE__*/_jsxs(\"main\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: post.data.title\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.info,\n        children: [/*#__PURE__*/_jsxs(\"time\", {\n          children: [/*#__PURE__*/_jsx(FiCalendar, {}), format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n            locale: ptBR\n          })]\n        }), /*#__PURE__*/_jsxs(\"span\", {\n          children: [/*#__PURE__*/_jsx(FiUser, {}), post.data.author]\n        }), /*#__PURE__*/_jsxs(\"span\", {\n          children: [/*#__PURE__*/_jsx(FiClock, {}), formattedTime(timeToRead)]\n        })]\n      }), post.data.content.map((content, index) => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.postHeading,\n          children: [/*#__PURE__*/_jsx(\"h1\", {\n            children: content.heading\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.postContent,\n            dangerouslySetInnerHTML: {\n              __html: RichText.asHtml(content.body)\n            }\n          })]\n        }, index);\n      })]\n    })]\n  });\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([Prismic.predicates.at('document.type', 'post')], {\n    pageSize: 1\n  });\n  console.log(posts);\n  const paths = posts.results.map(item => {\n    return {\n      params: {\n        slug: item.uid\n      }\n    };\n  });\n  console.log(paths);\n  return {\n    paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: {\n        url: response.data.banner.url\n      },\n      author: response.data.author,\n      content: response.data.content.map(cont => {\n        return {\n          heading: cont.heading,\n          body: cont.body\n        };\n      })\n    },\n    first_publication_date: response.first_publication_date\n  };\n  return {\n    props: {\n      post\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}