{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx\";\nimport Prismic from '@prismicio/client';\nimport { getPrismicClient } from '../../services/prismic';\nimport styles from './post.module.scss';\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format, addSeconds } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { RichText } from 'prismic-dom';\nimport { useEffect, useState } from 'react';\n\nfunction formattedTime(seconds) {\n  var helperDate = addSeconds(new Date(0), seconds);\n  return format(helperDate, 'mm:ss');\n}\n\nexport default function Post({\n  post\n}) {\n  console.log({\n    post\n  });\n  const {\n    0: timeToRead,\n    1: setTimeToRead\n  } = useState(0);\n  useEffect(() => {\n    if (post) {\n      const contentText = [];\n      post.data.content.map(content => {\n        contentText.push(RichText.asText(content.body));\n      });\n      const totalWords = contentText.join(' ').split(' ').length;\n      setTimeToRead(totalWords / 200 * 60);\n    }\n  }, [post]);\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: styles.banner,\n      src: post.data.banner.url,\n      alt: \"banner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.info,\n        children: [/*#__PURE__*/_jsxDEV(\"time\", {\n          children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n            locale: ptBR\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), post.data.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(FiClock, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), formattedTime(timeToRead)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), post.data.content.map((content, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.postContent,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: content.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.postContent,\n            dangerouslySetInnerHTML: {\n              __html: RichText.asHtml(content.body)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query([Prismic.predicates.at('document.type', 'post')], {\n    pageSize: 1\n  });\n  console.log(posts);\n  const paths = posts.results.map(item => {\n    return {\n      params: {\n        slug: item.uid\n      }\n    };\n  });\n  console.log(paths);\n  return {\n    paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: {\n        url: response.data.banner.url\n      },\n      author: response.data.author,\n      content: response.data.content.map(cont => {\n        return {\n          heading: cont.heading,\n          body: cont.body\n        };\n      })\n    },\n    first_publication_date: response.first_publication_date\n  };\n  return {\n    props: {\n      post\n    }\n  };\n};","map":{"version":3,"sources":["/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx"],"names":["Prismic","getPrismicClient","styles","Header","FiCalendar","FiClock","FiUser","format","addSeconds","ptBR","RichText","useEffect","useState","formattedTime","seconds","helperDate","Date","Post","post","console","log","timeToRead","setTimeToRead","contentText","data","content","map","push","asText","body","totalWords","join","split","length","banner","url","container","title","info","first_publication_date","locale","author","index","postContent","heading","__html","asHtml","getStaticPaths","prismic","posts","query","predicates","at","pageSize","paths","results","item","params","slug","uid","fallback","getStaticProps","response","getByUID","String","cont","props"],"mappings":"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","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\nimport { useRouter } from 'next/router';\nimport Prismic from '@prismicio/client';\n\nimport { getPrismicClient } from '../../services/prismic';\n\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\n\nimport Header from '../../components/Header';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport { format, addSeconds } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { RichText } from 'prismic-dom';\nimport { useEffect, useState } from 'react';\n\nfunction formattedTime(seconds) {\n  var helperDate = addSeconds(new Date(0), seconds);\n  return format(helperDate, 'mm:ss');\n}\n\ninterface Post {\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n}\n\nexport default function Post({ post }: PostProps) {\n  console.log({ post });\n  const [timeToRead, setTimeToRead] = useState(0);\n  useEffect(() => {\n    if (post) {\n      const contentText = [];\n      post.data.content.map(content => {\n        contentText.push(RichText.asText(content.body));\n      });\n      const totalWords = contentText.join(' ').split(' ').length;\n      setTimeToRead((totalWords / 200) * 60);\n    }\n  }, [post]);\n\n  if (!post) {\n    return <h1>Carregando...</h1>;\n  }\n\n  return (\n    <>\n      <Header />\n      <img className={styles.banner} src={post.data.banner.url} alt=\"banner\" />\n      <main className={styles.container}>\n        <h1>{post.data.title}</h1>\n        <div className={styles.info}>\n          <time>\n            <FiCalendar />\n            {format(new Date(post.first_publication_date), 'dd LLL yyyy', {\n              locale: ptBR,\n            })}\n          </time>\n          <span>\n            <FiUser />\n            {post.data.author}\n          </span>\n          <span>\n            <FiClock />\n            {formattedTime(timeToRead)}\n          </span>\n        </div>\n        {post.data.content.map((content, index) => {\n          return (\n            <div key={index} className={styles.postContent}>\n              <h1>{content.heading}</h1>\n              <div\n                className={styles.postContent}\n                dangerouslySetInnerHTML={{\n                  __html: RichText.asHtml(content.body),\n                }}\n              ></div>\n            </div>\n          );\n        })}\n      </main>\n    </>\n  );\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  const posts = await prismic.query(\n    [Prismic.predicates.at('document.type', 'post')],\n    { pageSize: 1 }\n  );\n  console.log(posts);\n\n  const paths = posts.results.map(item => {\n    return { params: { slug: item.uid } };\n  });\n  console.log(paths);\n\n  return { paths, fallback: true };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { slug } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: {\n        url: response.data.banner.url,\n      },\n      author: response.data.author,\n      content: response.data.content.map(cont => {\n        return {\n          heading: cont.heading,\n          body: cont.body,\n        };\n      }),\n    },\n    first_publication_date: response.first_publication_date,\n  };\n  return {\n    props: {\n      post,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}