webpackHotUpdate_N_E("pages/post/[slug]",{

/***/ "./node_modules/@prismicio/client/esm/@prismicio/client.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@prismicio/client/esm/@prismicio/client.mjs ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar Variation = /** @class */ (function () {\r\n    function Variation(data) {\r\n        this.data = {};\r\n        this.data = data;\r\n    }\r\n    Variation.prototype.id = function () {\r\n        return this.data.id;\r\n    };\r\n    Variation.prototype.ref = function () {\r\n        return this.data.ref;\r\n    };\r\n    Variation.prototype.label = function () {\r\n        return this.data.label;\r\n    };\r\n    return Variation;\r\n}());\r\nvar Experiment = /** @class */ (function () {\r\n    function Experiment(data) {\r\n        this.data = {};\r\n        this.data = data;\r\n        this.variations = (data.variations || []).map(function (v) {\r\n            return new Variation(v);\r\n        });\r\n    }\r\n    Experiment.prototype.id = function () {\r\n        return this.data.id;\r\n    };\r\n    Experiment.prototype.googleId = function () {\r\n        return this.data.googleId;\r\n    };\r\n    Experiment.prototype.name = function () {\r\n        return this.data.name;\r\n    };\r\n    return Experiment;\r\n}());\r\nvar Experiments = /** @class */ (function () {\r\n    function Experiments(data) {\r\n        if (data) {\r\n            this.drafts = (data.drafts || []).map(function (exp) {\r\n                return new Experiment(exp);\r\n            });\r\n            this.running = (data.running || []).map(function (exp) {\r\n                return new Experiment(exp);\r\n            });\r\n        }\r\n    }\r\n    Experiments.prototype.current = function () {\r\n        if (this.running.length > 0) {\r\n            return this.running[0];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Experiments.prototype.refFromCookie = function (cookie) {\r\n        if (!cookie || cookie.trim() === '')\r\n            return null;\r\n        var splitted = cookie.trim().split(' ');\r\n        if (splitted.length < 2)\r\n            return null;\r\n        var expId = splitted[0];\r\n        var varIndex = parseInt(splitted[1], 10);\r\n        var exp = this.running.filter(function (exp) {\r\n            return exp.googleId() === expId && exp.variations.length > varIndex;\r\n        })[0];\r\n        return exp ? exp.variations[varIndex].ref() : null;\r\n    };\r\n    return Experiments;\r\n}());\n\nvar LazySearchForm = /** @class */ (function () {\r\n    function LazySearchForm(id, api) {\r\n        this.id = id;\r\n        this.api = api;\r\n        this.fields = {};\r\n    }\r\n    LazySearchForm.prototype.set = function (key, value) {\r\n        this.fields[key] = value;\r\n        return this;\r\n    };\r\n    LazySearchForm.prototype.ref = function (ref) {\r\n        return this.set('ref', ref);\r\n    };\r\n    LazySearchForm.prototype.query = function (query) {\r\n        return this.set('q', query);\r\n    };\r\n    LazySearchForm.prototype.pageSize = function (size) {\r\n        return this.set('pageSize', size);\r\n    };\r\n    LazySearchForm.prototype.graphQuery = function (query) {\r\n        return this.set('graphQuery', query);\r\n    };\r\n    LazySearchForm.prototype.lang = function (langCode) {\r\n        return this.set('lang', langCode);\r\n    };\r\n    LazySearchForm.prototype.page = function (p) {\r\n        return this.set('page', p);\r\n    };\r\n    LazySearchForm.prototype.after = function (documentId) {\r\n        return this.set('after', documentId);\r\n    };\r\n    LazySearchForm.prototype.orderings = function (orderings) {\r\n        return this.set('orderings', orderings);\r\n    };\r\n    LazySearchForm.prototype.url = function () {\r\n        var _this = this;\r\n        return this.api.get().then(function (api) {\r\n            return LazySearchForm.toSearchForm(_this, api).url();\r\n        });\r\n    };\r\n    LazySearchForm.prototype.submit = function (cb) {\r\n        var _this = this;\r\n        return this.api.get().then(function (api) {\r\n            return LazySearchForm.toSearchForm(_this, api).submit(cb);\r\n        });\r\n    };\r\n    LazySearchForm.toSearchForm = function (lazyForm, api) {\r\n        var form = api.form(lazyForm.id);\r\n        if (form) {\r\n            return Object.keys(lazyForm.fields).reduce(function (form, fieldKey) {\r\n                var fieldValue = lazyForm.fields[fieldKey];\r\n                if (fieldKey === 'q') {\r\n                    return form.query(fieldValue);\r\n                }\r\n                else if (fieldKey === 'pageSize') {\r\n                    return form.pageSize(fieldValue);\r\n                }\r\n                else if (fieldKey === 'graphQuery') {\r\n                    return form.graphQuery(fieldValue);\r\n                }\r\n                else if (fieldKey === 'lang') {\r\n                    return form.lang(fieldValue);\r\n                }\r\n                else if (fieldKey === 'page') {\r\n                    return form.page(fieldValue);\r\n                }\r\n                else if (fieldKey === 'after') {\r\n                    return form.after(fieldValue);\r\n                }\r\n                else if (fieldKey === 'orderings') {\r\n                    return form.orderings(fieldValue);\r\n                }\r\n                else {\r\n                    return form.set(fieldKey, fieldValue);\r\n                }\r\n            }, form);\r\n        }\r\n        else {\r\n            throw new Error(\"Unable to access to form \" + lazyForm.id);\r\n        }\r\n    };\r\n    return LazySearchForm;\r\n}());\r\nvar SearchForm = /** @class */ (function () {\r\n    function SearchForm(form, httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.form = form;\r\n        this.data = {};\r\n        for (var field in form.fields) {\r\n            if (form.fields[field]['default']) {\r\n                this.data[field] = [form.fields[field]['default']];\r\n            }\r\n        }\r\n    }\r\n    SearchForm.prototype.set = function (field, value) {\r\n        var fieldDesc = this.form.fields[field];\r\n        if (!fieldDesc)\r\n            throw new Error('Unknown field ' + field);\r\n        var checkedValue = value === '' || value === undefined ? null : value;\r\n        var values = this.data[field] || [];\r\n        if (fieldDesc.multiple) {\r\n            values = checkedValue ? values.concat([checkedValue]) : values;\r\n        }\r\n        else {\r\n            values = checkedValue ? [checkedValue] : values;\r\n        }\r\n        this.data[field] = values;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets a ref to query on for this SearchForm. This is a mandatory\r\n     * method to call before calling submit(), and api.form('everything').submit()\r\n     * will not work.\r\n     */\r\n    SearchForm.prototype.ref = function (ref) {\r\n        return this.set('ref', ref);\r\n    };\r\n    /**\r\n     * Sets a predicate-based query for this SearchForm. This is where you\r\n     * paste what you compose in your prismic.io API browser.\r\n     */\r\n    SearchForm.prototype.query = function (query) {\r\n        if (typeof query === 'string') {\r\n            return this.query([query]);\r\n        }\r\n        else if (Array.isArray(query)) {\r\n            return this.set('q', \"[\" + query.join('') + \"]\");\r\n        }\r\n        else {\r\n            throw new Error(\"Invalid query : \" + query);\r\n        }\r\n    };\r\n    /**\r\n     * Sets a page size to query for this SearchForm. This is an optional method.\r\n     *\r\n     * @param {number} size - The page size\r\n     * @returns {SearchForm} - The SearchForm itself\r\n     */\r\n    SearchForm.prototype.pageSize = function (size) {\r\n        return this.set('pageSize', size);\r\n    };\r\n    /**\r\n     * Sets the graphquery to query for this SearchForm. This is an optional method.\r\n     */\r\n    SearchForm.prototype.graphQuery = function (query) {\r\n        return this.set('graphQuery', query);\r\n    };\r\n    /**\r\n     * Sets the language to query for this SearchForm. This is an optional method.\r\n     */\r\n    SearchForm.prototype.lang = function (langCode) {\r\n        return this.set('lang', langCode);\r\n    };\r\n    /**\r\n     * Sets the page number to query for this SearchForm. This is an optional method.\r\n     */\r\n    SearchForm.prototype.page = function (p) {\r\n        return this.set('page', p);\r\n    };\r\n    /**\r\n     * Remove all the documents except for those after the specified document in the list. This is an optional method.\r\n     */\r\n    SearchForm.prototype.after = function (documentId) {\r\n        return this.set('after', documentId);\r\n    };\r\n    /**\r\n     * Sets the orderings to query for this SearchForm. This is an optional method.\r\n     */\r\n    SearchForm.prototype.orderings = function (orderings) {\r\n        if (!orderings) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.set('orderings', \"[\" + orderings.join(',') + \"]\");\r\n        }\r\n    };\r\n    /**\r\n     * Build the URL to query\r\n     */\r\n    SearchForm.prototype.url = function () {\r\n        var url = this.form.action;\r\n        if (this.data) {\r\n            var sep = (url.indexOf('?') > -1 ? '&' : '?');\r\n            for (var key in this.data) {\r\n                if (Object.prototype.hasOwnProperty.call(this.data, key)) {\r\n                    var values = this.data[key];\r\n                    if (values) {\r\n                        for (var i = 0; i < values.length; i++) {\r\n                            url += sep + key + '=' + encodeURIComponent(values[i]);\r\n                            sep = '&';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Submits the query, and calls the callback function.\r\n     */\r\n    SearchForm.prototype.submit = function (cb) {\r\n        return this.httpClient.cachedRequest(this.url()).then(function (response) {\r\n            cb && cb(null, response);\r\n            return response;\r\n        }).catch(function (error) {\r\n            cb && cb(error);\r\n            throw error;\r\n        });\r\n    };\r\n    return SearchForm;\r\n}());\n\nvar OPERATOR = {\r\n    at: 'at',\r\n    not: 'not',\r\n    missing: 'missing',\r\n    has: 'has',\r\n    any: 'any',\r\n    in: 'in',\r\n    fulltext: 'fulltext',\r\n    similar: 'similar',\r\n    numberGt: 'number.gt',\r\n    numberLt: 'number.lt',\r\n    numberInRange: 'number.inRange',\r\n    dateBefore: 'date.before',\r\n    dateAfter: 'date.after',\r\n    dateBetween: 'date.between',\r\n    dateDayOfMonth: 'date.day-of-month',\r\n    dateDayOfMonthAfter: 'date.day-of-month-after',\r\n    dateDayOfMonthBefore: 'date.day-of-month-before',\r\n    dateDayOfWeek: 'date.day-of-week',\r\n    dateDayOfWeekAfter: 'date.day-of-week-after',\r\n    dateDayOfWeekBefore: 'date.day-of-week-before',\r\n    dateMonth: 'date.month',\r\n    dateMonthBefore: 'date.month-before',\r\n    dateMonthAfter: 'date.month-after',\r\n    dateYear: 'date.year',\r\n    dateHour: 'date.hour',\r\n    dateHourBefore: 'date.hour-before',\r\n    dateHourAfter: 'date.hour-after',\r\n    GeopointNear: 'geopoint.near',\r\n};\r\nfunction encode(value) {\r\n    if (typeof value === 'string') {\r\n        return \"\\\"\" + value + \"\\\"\";\r\n    }\r\n    else if (typeof value === 'number') {\r\n        return value.toString();\r\n    }\r\n    else if (value instanceof Date) {\r\n        return value.getTime().toString();\r\n    }\r\n    else if (Array.isArray(value)) {\r\n        return \"[\" + value.map(function (v) { return encode(v); }).join(',') + \"]\";\r\n    }\r\n    else if (typeof value === \"boolean\") {\r\n        return value.toString();\r\n    }\r\n    else {\r\n        throw new Error(\"Unable to encode \" + value + \" of type \" + typeof value);\r\n    }\r\n}\r\nvar geopoint = {\r\n    near: function (fragment, latitude, longitude, radius) {\r\n        return \"[\" + OPERATOR.GeopointNear + \"(\" + fragment + \", \" + latitude + \", \" + longitude + \", \" + radius + \")]\";\r\n    },\r\n};\r\nvar date = {\r\n    before: function (fragment, before) {\r\n        return \"[\" + OPERATOR.dateBefore + \"(\" + fragment + \", \" + encode(before) + \")]\";\r\n    },\r\n    after: function (fragment, after) {\r\n        return \"[\" + OPERATOR.dateAfter + \"(\" + fragment + \", \" + encode(after) + \")]\";\r\n    },\r\n    between: function (fragment, before, after) {\r\n        return \"[\" + OPERATOR.dateBetween + \"(\" + fragment + \", \" + encode(before) + \", \" + encode(after) + \")]\";\r\n    },\r\n    dayOfMonth: function (fragment, day) {\r\n        return \"[\" + OPERATOR.dateDayOfMonth + \"(\" + fragment + \", \" + day + \")]\";\r\n    },\r\n    dayOfMonthAfter: function (fragment, day) {\r\n        return \"[\" + OPERATOR.dateDayOfMonthAfter + \"(\" + fragment + \", \" + day + \")]\";\r\n    },\r\n    dayOfMonthBefore: function (fragment, day) {\r\n        return \"[\" + OPERATOR.dateDayOfMonthBefore + \"(\" + fragment + \", \" + day + \")]\";\r\n    },\r\n    dayOfWeek: function (fragment, day) {\r\n        return \"[\" + OPERATOR.dateDayOfWeek + \"(\" + fragment + \", \" + encode(day) + \")]\";\r\n    },\r\n    dayOfWeekAfter: function (fragment, day) {\r\n        return \"[\" + OPERATOR.dateDayOfWeekAfter + \"(\" + fragment + \", \" + encode(day) + \")]\";\r\n    },\r\n    dayOfWeekBefore: function (fragment, day) {\r\n        return \"[\" + OPERATOR.dateDayOfWeekBefore + \"(\" + fragment + \", \" + encode(day) + \")]\";\r\n    },\r\n    month: function (fragment, month) {\r\n        return \"[\" + OPERATOR.dateMonth + \"(\" + fragment + \", \" + encode(month) + \")]\";\r\n    },\r\n    monthBefore: function (fragment, month) {\r\n        return \"[\" + OPERATOR.dateMonthBefore + \"(\" + fragment + \", \" + encode(month) + \")]\";\r\n    },\r\n    monthAfter: function (fragment, month) {\r\n        return \"[\" + OPERATOR.dateMonthAfter + \"(\" + fragment + \", \" + encode(month) + \")]\";\r\n    },\r\n    year: function (fragment, year) {\r\n        return \"[\" + OPERATOR.dateYear + \"(\" + fragment + \", \" + year + \")]\";\r\n    },\r\n    hour: function (fragment, hour) {\r\n        return \"[\" + OPERATOR.dateHour + \"(\" + fragment + \", \" + hour + \")]\";\r\n    },\r\n    hourBefore: function (fragment, hour) {\r\n        return \"[\" + OPERATOR.dateHourBefore + \"(\" + fragment + \", \" + hour + \")]\";\r\n    },\r\n    hourAfter: function (fragment, hour) {\r\n        return \"[\" + OPERATOR.dateHourAfter + \"(\" + fragment + \", \" + hour + \")]\";\r\n    },\r\n};\r\nvar number = {\r\n    gt: function (fragment, value) {\r\n        return \"[\" + OPERATOR.numberGt + \"(\" + fragment + \", \" + value + \")]\";\r\n    },\r\n    lt: function (fragment, value) {\r\n        return \"[\" + OPERATOR.numberLt + \"(\" + fragment + \", \" + value + \")]\";\r\n    },\r\n    inRange: function (fragment, before, after) {\r\n        return \"[\" + OPERATOR.numberInRange + \"(\" + fragment + \", \" + before + \", \" + after + \")]\";\r\n    },\r\n};\r\nvar Predicates = {\r\n    at: function (fragment, value) {\r\n        return \"[\" + OPERATOR.at + \"(\" + fragment + \", \" + encode(value) + \")]\";\r\n    },\r\n    not: function (fragment, value) {\r\n        return \"[\" + OPERATOR.not + \"(\" + fragment + \", \" + encode(value) + \")]\";\r\n    },\r\n    missing: function (fragment) {\r\n        return \"[\" + OPERATOR.missing + \"(\" + fragment + \")]\";\r\n    },\r\n    has: function (fragment) {\r\n        return \"[\" + OPERATOR.has + \"(\" + fragment + \")]\";\r\n    },\r\n    any: function (fragment, values) {\r\n        return \"[\" + OPERATOR.any + \"(\" + fragment + \", \" + encode(values) + \")]\";\r\n    },\r\n    in: function (fragment, values) {\r\n        return \"[\" + OPERATOR.in + \"(\" + fragment + \", \" + encode(values) + \")]\";\r\n    },\r\n    fulltext: function (fragment, value) {\r\n        return \"[\" + OPERATOR.fulltext + \"(\" + fragment + \", \" + encode(value) + \")]\";\r\n    },\r\n    similar: function (documentId, maxResults) {\r\n        return \"[\" + OPERATOR.similar + \"(\\\"\" + documentId + \"\\\", \" + maxResults + \")]\";\r\n    },\r\n    date: date,\r\n    dateBefore: date.before,\r\n    dateAfter: date.after,\r\n    dateBetween: date.between,\r\n    dayOfMonth: date.dayOfMonth,\r\n    dayOfMonthAfter: date.dayOfMonthAfter,\r\n    dayOfMonthBefore: date.dayOfMonthBefore,\r\n    dayOfWeek: date.dayOfWeek,\r\n    dayOfWeekAfter: date.dayOfWeekAfter,\r\n    dayOfWeekBefore: date.dayOfWeekBefore,\r\n    month: date.month,\r\n    monthBefore: date.monthBefore,\r\n    monthAfter: date.monthAfter,\r\n    year: date.year,\r\n    hour: date.hour,\r\n    hourBefore: date.hourBefore,\r\n    hourAfter: date.hourAfter,\r\n    number: number,\r\n    gt: number.gt,\r\n    lt: number.lt,\r\n    inRange: number.inRange,\r\n    near: geopoint.near,\r\n    geopoint: geopoint,\r\n};\n\n/* eslint-disable */\r\n// Some portions of code from https://github.com/jshttp/cookie\r\nvar decode = decodeURIComponent;\r\nfunction tryDecode(str, decode) {\r\n    try {\r\n        return decode(str);\r\n    }\r\n    catch (e) {\r\n        return str;\r\n    }\r\n}\r\nfunction parse(str, options) {\r\n    if (typeof str !== 'string') {\r\n        throw new TypeError('argument str must be a string');\r\n    }\r\n    var obj = {};\r\n    var opt = options || {};\r\n    var pairs = str.split(/; */);\r\n    var dec = opt.decode || decode;\r\n    pairs.forEach(function (pair) {\r\n        var eq_idx = pair.indexOf('=');\r\n        // skip things that don't look like key=value\r\n        if (eq_idx < 0) {\r\n            return;\r\n        }\r\n        var key = pair.substr(0, eq_idx).trim();\r\n        var val = pair.substr(++eq_idx, pair.length).trim();\r\n        // quoted values\r\n        if ('\"' == val[0]) {\r\n            val = val.slice(1, -1);\r\n        }\r\n        // only assign once\r\n        if (undefined == obj[key]) {\r\n            obj[key] = tryDecode(val, dec);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\nvar Cookies = { parse: parse };\n\nfunction createPreviewResolver(token, documentId, getDocByID) {\r\n    var resolve = function (linkResolver, defaultUrl, cb) {\r\n        if (documentId && getDocByID) {\r\n            return getDocByID(documentId, { ref: token }).then(function (document) {\r\n                if (!document) {\r\n                    cb && cb(null, defaultUrl);\r\n                    return defaultUrl;\r\n                }\r\n                else {\r\n                    var url = (linkResolver && linkResolver(document)) || document.url || defaultUrl;\r\n                    cb && cb(null, url);\r\n                    return url;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            return Promise.resolve(defaultUrl);\r\n        }\r\n    };\r\n    return { token: token, documentId: documentId, resolve: resolve };\r\n}\n\nvar PREVIEW_COOKIE = 'io.prismic.preview';\r\nvar EXPERIMENT_COOKIE = 'io.prismic.experiment';\r\nvar ResolvedApi = /** @class */ (function () {\r\n    function ResolvedApi(data, httpClient, options) {\r\n        this.data = data;\r\n        this.masterRef = data.refs.filter(function (ref) { return ref.isMasterRef; })[0];\r\n        this.experiments = new Experiments(data.experiments);\r\n        this.bookmarks = data.bookmarks;\r\n        this.httpClient = httpClient;\r\n        this.options = options;\r\n        this.refs = data.refs;\r\n        this.tags = data.tags;\r\n        this.types = data.types;\r\n        this.languages = data.languages;\r\n    }\r\n    /**\r\n     * Returns a useable form from its id, as described in the RESTful description of the API.\r\n     * For instance: api.form(\"everything\") works on every repository (as \"everything\" exists by default)\r\n     * You can then chain the calls: api.form(\"everything\").query('[[:d = at(document.id, \"UkL0gMuvzYUANCpf\")]]').ref(ref).submit()\r\n     */\r\n    ResolvedApi.prototype.form = function (formId) {\r\n        var form = this.data.forms[formId];\r\n        if (form) {\r\n            return new SearchForm(form, this.httpClient);\r\n        }\r\n        return null;\r\n    };\r\n    ResolvedApi.prototype.everything = function () {\r\n        var f = this.form('everything');\r\n        if (!f)\r\n            throw new Error('Missing everything form');\r\n        return f;\r\n    };\r\n    /**\r\n     * The ID of the master ref on this prismic.io API.\r\n     * Do not use like this: searchForm.ref(api.master()).\r\n     * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\r\n     */\r\n    ResolvedApi.prototype.master = function () {\r\n        return this.masterRef.ref;\r\n    };\r\n    /**\r\n     * Returns the ref ID for a given ref's label.\r\n     * Do not use like this: searchForm.ref(api.ref(\"Future release label\")).\r\n     * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\r\n     */\r\n    ResolvedApi.prototype.ref = function (label) {\r\n        var ref = this.data.refs.filter(function (ref) { return ref.label === label; })[0];\r\n        return ref ? ref.ref : null;\r\n    };\r\n    ResolvedApi.prototype.currentExperiment = function () {\r\n        return this.experiments.current();\r\n    };\r\n    /**\r\n     * Query the repository\r\n     */\r\n    ResolvedApi.prototype.query = function (q, optionsOrCallback, cb) {\r\n        if (cb === void 0) { cb = function () { }; }\r\n        var _a = typeof optionsOrCallback === 'function'\r\n            ? { options: {}, callback: optionsOrCallback }\r\n            : { options: optionsOrCallback || {}, callback: cb }, options = _a.options, callback = _a.callback;\r\n        var form = this.everything();\r\n        for (var key in options) {\r\n            form = form.set(key, options[key]);\r\n        }\r\n        if (!options.ref) {\r\n            // Look in cookies if we have a ref (preview or experiment)\r\n            var cookieString = '';\r\n            if (this.options.req) { // NodeJS\r\n                cookieString = this.options.req.headers['cookie'] || '';\r\n            }\r\n            else if (typeof window !== 'undefined' && window.document) { // Browser\r\n                cookieString = window.document.cookie || '';\r\n            }\r\n            var cookies = Cookies.parse(cookieString);\r\n            var previewRef = cookies[PREVIEW_COOKIE];\r\n            var experimentRef = this.experiments.refFromCookie(cookies[EXPERIMENT_COOKIE]);\r\n            form = form.ref(previewRef || experimentRef || this.masterRef.ref);\r\n        }\r\n        if (q) {\r\n            form.query(q);\r\n        }\r\n        return form.submit(callback);\r\n    };\r\n    /**\r\n     * Retrieve the document returned by the given query\r\n     * @param {string|array|Predicate} the query\r\n     * @param {object} additional parameters. In NodeJS, pass the request as 'req'.\r\n     * @param {function} callback(err, doc)\r\n     */\r\n    ResolvedApi.prototype.queryFirst = function (q, optionsOrCallback, cb) {\r\n        var _a = typeof optionsOrCallback === 'function'\r\n            ? { options: {}, callback: optionsOrCallback }\r\n            : { options: optionsOrCallback || {}, callback: cb || (function () { }) }, options = _a.options, callback = _a.callback;\r\n        options.page = 1;\r\n        options.pageSize = 1;\r\n        return this.query(q, options).then(function (response) {\r\n            var document = response && response.results && response.results[0];\r\n            callback(null, document);\r\n            return document;\r\n        }).catch(function (error) {\r\n            callback(error);\r\n            throw error;\r\n        });\r\n    };\r\n    /**\r\n     * Retrieve the document with the given id\r\n     */\r\n    ResolvedApi.prototype.getByID = function (id, maybeOptions, cb) {\r\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\r\n        if (!options.lang)\r\n            options.lang = '*';\r\n        return this.queryFirst(Predicates.at('document.id', id), options, cb);\r\n    };\r\n    /**\r\n     * Retrieve multiple documents from an array of id\r\n     */\r\n    ResolvedApi.prototype.getByIDs = function (ids, maybeOptions, cb) {\r\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\r\n        if (!options.lang)\r\n            options.lang = '*';\r\n        return this.query(Predicates.in('document.id', ids), options, cb);\r\n    };\r\n    /**\r\n     * Retrieve the document with the given uid\r\n     */\r\n    ResolvedApi.prototype.getByUID = function (type, uid, maybeOptions, cb) {\r\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\r\n        if (options.lang === '*')\r\n            throw new Error(\"FORBIDDEN. You can't use getByUID with *, use the predicates instead.\");\r\n        if (!options.page)\r\n            options.page = 1;\r\n        return this.queryFirst(Predicates.at(\"my.\" + type + \".uid\", uid), options, cb);\r\n    };\r\n    /**\r\n     * Retrieve the singleton document with the given type\r\n     */\r\n    ResolvedApi.prototype.getSingle = function (type, maybeOptions, cb) {\r\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\r\n        return this.queryFirst(Predicates.at('document.type', type), options, cb);\r\n    };\r\n    /**\r\n     * Retrieve the document with the given bookmark\r\n     */\r\n    ResolvedApi.prototype.getBookmark = function (bookmark, maybeOptions, cb) {\r\n        var id = this.data.bookmarks[bookmark];\r\n        if (id) {\r\n            return this.getByID(id, maybeOptions, cb);\r\n        }\r\n        else {\r\n            return Promise.reject('Error retrieving bookmarked id');\r\n        }\r\n    };\r\n    ResolvedApi.prototype.getPreviewResolver = function (token, documentId) {\r\n        return createPreviewResolver(token, documentId, this.getByID.bind(this));\r\n    };\r\n    return ResolvedApi;\r\n}());\n\n/* eslint-disable */\r\n/**\r\n* A doubly linked list-based Least Recently Used (LRU) cache. Will keep most\r\n* recently used items while discarding least recently used items when its limit\r\n* is reached.\r\n*\r\n* Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\r\n* Typescript-ified by Oleksandr Nikitin <https://tvori.info>\r\n*\r\n* Illustration of the design:\r\n*\r\n*       entry             entry             entry             entry\r\n*       ______            ______            ______            ______\r\n*      | head |.newer => |      |.newer => |      |.newer => | tail |\r\n*      |  A   |          |  B   |          |  C   |          |  D   |\r\n*      |______| <= older.|______| <= older.|______| <= older.|______|\r\n*\r\n*  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\r\n*/\r\nfunction MakeLRUCache(limit) {\r\n    return new LRUCache(limit);\r\n}\r\nfunction LRUCache(limit) {\r\n    // Current size of the cache. (Read-only).\r\n    this.size = 0;\r\n    // Maximum number of items this cache can hold.\r\n    this.limit = limit;\r\n    this._keymap = {};\r\n}\r\n/**\r\n * Put <value> into the cache associated with <key>. Returns the entry which was\r\n * removed to make room for the new entry. Otherwise undefined is returned\r\n * (i.e. if there was enough room already).\r\n */\r\nLRUCache.prototype.put = function (key, value) {\r\n    var entry = { key: key, value: value };\r\n    // Note: No protection agains replacing, and thus orphan entries. By design.\r\n    this._keymap[key] = entry;\r\n    if (this.tail) {\r\n        // link previous tail to the new tail (entry)\r\n        this.tail.newer = entry;\r\n        entry.older = this.tail;\r\n    }\r\n    else {\r\n        // we're first in -- yay\r\n        this.head = entry;\r\n    }\r\n    // add new entry to the end of the linked list -- it's now the freshest entry.\r\n    this.tail = entry;\r\n    if (this.size === this.limit) {\r\n        // we hit the limit -- remove the head\r\n        return this.shift();\r\n    }\r\n    else {\r\n        // increase the size counter\r\n        this.size++;\r\n    }\r\n};\r\n/**\r\n * Purge the least recently used (oldest) entry from the cache. Returns the\r\n * removed entry or undefined if the cache was empty.\r\n *\r\n * If you need to perform any form of finalization of purged items, this is a\r\n * good place to do it. Simply override/replace this function:\r\n *\r\n *   var c = new LRUCache(123);\r\n *   c.shift = function() {\r\n *     var entry = LRUCache.prototype.shift.call(this);\r\n *     doSomethingWith(entry);\r\n *     return entry;\r\n *   }\r\n */\r\nLRUCache.prototype.shift = function () {\r\n    // todo: handle special case when limit == 1\r\n    var entry = this.head;\r\n    if (entry) {\r\n        if (this.head.newer) {\r\n            this.head = this.head.newer;\r\n            this.head.older = undefined;\r\n        }\r\n        else {\r\n            this.head = undefined;\r\n        }\r\n        // Remove last strong reference to <entry> and remove links from the purged\r\n        // entry being returned:\r\n        entry.newer = entry.older = undefined;\r\n        // delete is slow, but we need to do this to avoid uncontrollable growth:\r\n        delete this._keymap[entry.key];\r\n    }\r\n    console.log('purging ', entry.key);\r\n    return entry;\r\n};\r\n/**\r\n * Get and register recent use of <key>. Returns the value associated with <key>\r\n * or undefined if not in cache.\r\n */\r\nLRUCache.prototype.get = function (key, returnEntry) {\r\n    // First, find our cache entry\r\n    var entry = this._keymap[key];\r\n    if (entry === undefined)\r\n        return; // Not cached. Sorry.\r\n    // As <key> was found in the cache, register it as being requested recently\r\n    if (entry === this.tail) {\r\n        // Already the most recently used entry, so no need to update the list\r\n        return returnEntry ? entry : entry.value;\r\n    }\r\n    // HEAD--------------TAIL\r\n    //   <.older   .newer>\r\n    //  <--- add direction --\r\n    //   A  B  C  <D>  E\r\n    if (entry.newer) {\r\n        if (entry === this.head)\r\n            this.head = entry.newer;\r\n        entry.newer.older = entry.older; // C <-- E.\r\n    }\r\n    if (entry.older)\r\n        entry.older.newer = entry.newer; // C. --> E\r\n    entry.newer = undefined; // D --x\r\n    entry.older = this.tail; // D. --> E\r\n    if (this.tail)\r\n        this.tail.newer = entry; // E. <-- D\r\n    this.tail = entry;\r\n    return returnEntry ? entry : entry.value;\r\n};\r\n// ----------------------------------------------------------------------------\r\n// Following code is optional and can be removed without breaking the core\r\n// functionality.\r\n/**\r\n * Check if <key> is in the cache without registering recent use. Feasible if\r\n * you do not want to chage the state of the cache, but only \"peek\" at it.\r\n * Returns the entry associated with <key> if found, or undefined if not found.\r\n */\r\nLRUCache.prototype.find = function (key) {\r\n    return this._keymap[key];\r\n};\r\n/**\r\n * Update the value of entry with <key>. Returns the old value, or undefined if\r\n * entry was not in the cache.\r\n */\r\nLRUCache.prototype.set = function (key, value) {\r\n    var oldvalue;\r\n    var entry = this.get(key, true);\r\n    if (entry) {\r\n        oldvalue = entry.value;\r\n        entry.value = value;\r\n    }\r\n    else {\r\n        oldvalue = this.put(key, value);\r\n        if (oldvalue)\r\n            oldvalue = oldvalue.value;\r\n    }\r\n    return oldvalue;\r\n};\r\n/**\r\n * Remove entry <key> from cache and return its value. Returns undefined if not\r\n * found.\r\n */\r\nLRUCache.prototype.remove = function (key) {\r\n    var entry = this._keymap[key];\r\n    if (!entry)\r\n        return;\r\n    delete this._keymap[entry.key]; // need to do delete unfortunately\r\n    if (entry.newer && entry.older) {\r\n        // relink the older entry with the newer entry\r\n        entry.older.newer = entry.newer;\r\n        entry.newer.older = entry.older;\r\n    }\r\n    else if (entry.newer) {\r\n        // remove the link to us\r\n        entry.newer.older = undefined;\r\n        // link the newer entry to head\r\n        this.head = entry.newer;\r\n    }\r\n    else if (entry.older) {\r\n        // remove the link to us\r\n        entry.older.newer = undefined;\r\n        // link the newer entry to head\r\n        this.tail = entry.older;\r\n    }\r\n    else { // if(entry.older === undefined && entry.newer === undefined) {\r\n        this.head = this.tail = undefined;\r\n    }\r\n    this.size--;\r\n    return entry.value;\r\n};\r\n/** Removes all entries */\r\nLRUCache.prototype.removeAll = function () {\r\n    // This should be safe, as we never expose strong refrences to the outside\r\n    this.head = this.tail = undefined;\r\n    this.size = 0;\r\n    this._keymap = {};\r\n};\r\n/**\r\n * Return an array containing all keys of entries stored in the cache object, in\r\n * arbitrary order.\r\n */\r\nif (typeof Object.keys === 'function') {\r\n    LRUCache.prototype.keys = function () { return Object.keys(this._keymap); };\r\n}\r\nelse {\r\n    LRUCache.prototype.keys = function () {\r\n        var keys = [];\r\n        for (var k in this._keymap)\r\n            keys.push(k);\r\n        return keys;\r\n    };\r\n}\r\n/**\r\n * Call `fun` for each entry. Starting with the newest entry if `desc` is a true\r\n * value, otherwise starts with the oldest (head) enrty and moves towards the\r\n * tail.\r\n *\r\n * `fun` is called with 3 arguments in the context `context`:\r\n *   `fun.call(context, Object key, Object value, LRUCache self)`\r\n */\r\nLRUCache.prototype.forEach = function (fun, context, desc) {\r\n    var entry;\r\n    if (context === true) {\r\n        desc = true;\r\n        context = undefined;\r\n    }\r\n    else if (typeof context !== 'object')\r\n        context = this;\r\n    if (desc) {\r\n        entry = this.tail;\r\n        while (entry) {\r\n            fun.call(context, entry.key, entry.value, this);\r\n            entry = entry.older;\r\n        }\r\n    }\r\n    else {\r\n        entry = this.head;\r\n        while (entry) {\r\n            fun.call(context, entry.key, entry.value, this);\r\n            entry = entry.newer;\r\n        }\r\n    }\r\n};\r\n/** Returns a JSON (array) representation */\r\n//LRUCache.prototype.toJSON = function () {\r\n//    var s: IEntry[] = [], entry = this.head;\r\n//    while (entry) {\r\n//        s.push({ key: entry.key.toJSON(), value: entry.value.toJSON() });\r\n//        entry = entry.newer;\r\n//    }\r\n//    return s;\r\n//};\r\n/** Returns a String representation */\r\nLRUCache.prototype.toString = function () {\r\n    var s = '', entry = this.head;\r\n    while (entry) {\r\n        s += String(entry.key) + ':' + entry.value;\r\n        entry = entry.newer;\r\n        if (entry)\r\n            s += ' < ';\r\n    }\r\n    return s;\r\n};\r\n// Export ourselves\r\n//if (typeof this === 'object') this.LRUCache = LRUCache;\n\nvar DefaultApiCache = /** @class */ (function () {\r\n    function DefaultApiCache(limit) {\r\n        if (limit === void 0) { limit = 1000; }\r\n        this.lru = MakeLRUCache(limit);\r\n    }\r\n    DefaultApiCache.prototype.isExpired = function (key) {\r\n        var value = this.lru.get(key, false);\r\n        if (value) {\r\n            return value.expiredIn !== 0 && value.expiredIn < Date.now();\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    DefaultApiCache.prototype.get = function (key, cb) {\r\n        var value = this.lru.get(key, false);\r\n        if (value && !this.isExpired(key)) {\r\n            cb(null, value.data);\r\n        }\r\n        else {\r\n            cb && cb(null);\r\n        }\r\n    };\r\n    DefaultApiCache.prototype.set = function (key, value, ttl, cb) {\r\n        this.lru.remove(key);\r\n        this.lru.put(key, {\r\n            data: value,\r\n            expiredIn: ttl ? (Date.now() + (ttl * 1000)) : 0,\r\n        });\r\n        cb && cb(null);\r\n    };\r\n    DefaultApiCache.prototype.remove = function (key, cb) {\r\n        this.lru.remove(key);\r\n        cb && cb(null);\r\n    };\r\n    DefaultApiCache.prototype.clear = function (cb) {\r\n        this.lru.removeAll();\r\n        cb && cb(null);\r\n    };\r\n    return DefaultApiCache;\r\n}());\n\nfunction fetchRequest(url, options, callback) {\r\n    var fetchOptions = {\r\n        headers: {\r\n            Accept: 'application/json',\r\n        },\r\n    };\r\n    if (options && options.proxyAgent) {\r\n        fetchOptions.agent = options.proxyAgent;\r\n    }\r\n    // can't use number because of NodeJS globals included\r\n    var timeoutId;\r\n    var fetchPromise = cross_fetch__WEBPACK_IMPORTED_MODULE_0__(url, fetchOptions);\r\n    var promise = options.timeoutInMs ? Promise.race([\r\n        fetchPromise,\r\n        new Promise(function (_, reject) {\r\n            timeoutId = setTimeout(function () { return reject(new Error(url + \" response timeout\")); }, options.timeoutInMs);\r\n        })\r\n    ]) : fetchPromise;\r\n    promise.then(function (resp) {\r\n        clearTimeout(timeoutId);\r\n        if (~~(resp.status / 100 !== 2)) {\r\n            /**\r\n             * @description\r\n             * drain the resp before throwing an error to prevent memory leaks\r\n             * @link https://github.com/bitinn/node-fetch/issues/83\r\n             */\r\n            return resp.text().then(function () {\r\n                var e = new Error(\"Unexpected status code [\" + resp.status + \"] on URL \" + url);\r\n                e.status = resp.status;\r\n                throw e;\r\n            });\r\n        }\r\n        return resp.json().then(function (result) {\r\n            var cacheControl = resp.headers.get('cache-control');\r\n            var parsedCacheControl = cacheControl ? /max-age=(\\d+)/.exec(cacheControl) : null;\r\n            var ttl = parsedCacheControl ? parseInt(parsedCacheControl[1], 10) : undefined;\r\n            callback(null, result, resp, ttl);\r\n        });\r\n    }).catch(function (err) {\r\n        clearTimeout(timeoutId);\r\n        callback(err);\r\n    });\r\n}\r\nvar DefaultRequestHandler = /** @class */ (function () {\r\n    function DefaultRequestHandler(options) {\r\n        this.options = options || {};\r\n    }\r\n    DefaultRequestHandler.prototype.request = function (url, callback) {\r\n        fetchRequest(url, this.options, callback);\r\n    };\r\n    return DefaultRequestHandler;\r\n}());\n\nvar HttpClient = /** @class */ (function () {\r\n    function HttpClient(requestHandler, cache, proxyAgent, timeoutInMs) {\r\n        this.requestHandler = requestHandler || new DefaultRequestHandler({ proxyAgent: proxyAgent, timeoutInMs: timeoutInMs });\r\n        this.cache = cache || new DefaultApiCache();\r\n    }\r\n    HttpClient.prototype.request = function (url, callback) {\r\n        this.requestHandler.request(url, function (err, result, xhr, ttl) {\r\n            if (err) {\r\n                callback && callback(err, null, xhr, ttl);\r\n            }\r\n            else if (result) {\r\n                callback && callback(null, result, xhr, ttl);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Fetch a URL corresponding to a query, and parse the response as a Response object\r\n     */\r\n    HttpClient.prototype.cachedRequest = function (url, maybeOptions) {\r\n        var _this = this;\r\n        var options = maybeOptions || {};\r\n        var run = function (cb) {\r\n            var cacheKey = options.cacheKey || url;\r\n            _this.cache.get(cacheKey, function (cacheGetError, cacheGetValue) {\r\n                if (cacheGetError || cacheGetValue) {\r\n                    cb(cacheGetError, cacheGetValue);\r\n                }\r\n                else {\r\n                    _this.request(url, function (fetchError, fetchValue, _, ttlReq) {\r\n                        if (fetchError) {\r\n                            cb(fetchError, null);\r\n                        }\r\n                        else {\r\n                            var ttl = ttlReq || options.ttl;\r\n                            if (ttl) {\r\n                                _this.cache.set(cacheKey, fetchValue, ttl, cb);\r\n                            }\r\n                            cb(null, fetchValue);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        };\r\n        return new Promise(function (resolve, reject) {\r\n            run(function (err, value) {\r\n                if (err)\r\n                    reject(err);\r\n                if (value)\r\n                    resolve(value);\r\n            });\r\n        });\r\n    };\r\n    return HttpClient;\r\n}());\n\nfunction separator(url) {\r\n    return url.indexOf('?') > -1 ? '&' : '?';\r\n}\r\nvar Api = /** @class */ (function () {\r\n    function Api(url, options) {\r\n        this.options = options || {};\r\n        this.url = url;\r\n        var queryStrings = [\r\n            this.options.accessToken && \"access_token=\" + this.options.accessToken,\r\n            this.options.routes && \"routes=\" + encodeURIComponent(JSON.stringify(this.options.routes))\r\n        ]\r\n            .filter(Boolean);\r\n        if (queryStrings.length > 0) {\r\n            this.url += separator(url) + queryStrings.join('&');\r\n        }\r\n        this.apiDataTTL = this.options.apiDataTTL || 5;\r\n        this.httpClient = new HttpClient(this.options.requestHandler, this.options.apiCache, this.options.proxyAgent, this.options.timeoutInMs);\r\n    }\r\n    /**\r\n     * Fetches data used to construct the api client, from cache if it's\r\n     * present, otherwise from calling the prismic api endpoint (which is\r\n     * then cached).\r\n     */\r\n    Api.prototype.get = function (cb) {\r\n        var _this = this;\r\n        return this.httpClient.cachedRequest(this.url, { ttl: this.apiDataTTL }).then(function (data) {\r\n            var resolvedApi = new ResolvedApi(data, _this.httpClient, _this.options);\r\n            cb && cb(null, resolvedApi);\r\n            return resolvedApi;\r\n        }).catch(function (error) {\r\n            cb && cb(error);\r\n            throw error;\r\n        });\r\n    };\r\n    return Api;\r\n}());\n\nvar DefaultClient = /** @class */ (function () {\r\n    function DefaultClient(url, options) {\r\n        this.api = new Api(url, options);\r\n    }\r\n    DefaultClient.prototype.getApi = function () {\r\n        return this.api.get();\r\n    };\r\n    DefaultClient.prototype.everything = function () {\r\n        return this.form('everything');\r\n    };\r\n    DefaultClient.prototype.form = function (formId) {\r\n        return new LazySearchForm(formId, this.api);\r\n    };\r\n    DefaultClient.prototype.query = function (q, optionsOrCallback, cb) {\r\n        return this.getApi().then(function (api) { return api.query(q, optionsOrCallback, cb); });\r\n    };\r\n    DefaultClient.prototype.queryFirst = function (q, optionsOrCallback, cb) {\r\n        return this.getApi().then(function (api) { return api.queryFirst(q, optionsOrCallback, cb); });\r\n    };\r\n    DefaultClient.prototype.getByID = function (id, options, cb) {\r\n        return this.getApi().then(function (api) { return api.getByID(id, options, cb); });\r\n    };\r\n    DefaultClient.prototype.getByIDs = function (ids, options, cb) {\r\n        return this.getApi().then(function (api) { return api.getByIDs(ids, options, cb); });\r\n    };\r\n    DefaultClient.prototype.getByUID = function (type, uid, options, cb) {\r\n        return this.getApi().then(function (api) { return api.getByUID(type, uid, options, cb); });\r\n    };\r\n    DefaultClient.prototype.getSingle = function (type, options, cb) {\r\n        return this.getApi().then(function (api) { return api.getSingle(type, options, cb); });\r\n    };\r\n    DefaultClient.prototype.getBookmark = function (bookmark, options, cb) {\r\n        return this.getApi().then(function (api) { return api.getBookmark(bookmark, options, cb); });\r\n    };\r\n    DefaultClient.prototype.getPreviewResolver = function (token, documentId) {\r\n        var _this = this;\r\n        var getDocById = function (documentId, maybeOptions) { return _this.getApi().then(function (api) {\r\n            return api.getByID(documentId, maybeOptions);\r\n        }); };\r\n        return createPreviewResolver(token, documentId, getDocById);\r\n    };\r\n    DefaultClient.getApi = function (url, options) {\r\n        var api = new Api(url, options);\r\n        return api.get();\r\n    };\r\n    return DefaultClient;\r\n}());\n\nvar index = {\r\n    experimentCookie: EXPERIMENT_COOKIE,\r\n    previewCookie: PREVIEW_COOKIE,\r\n    Predicates: Predicates,\r\n    predicates: Predicates,\r\n    Experiments: Experiments,\r\n    Api: Api,\r\n    client: client,\r\n    getApi: getApi,\r\n    api: api,\r\n};\r\nfunction client(url, options) {\r\n    return new DefaultClient(url, options);\r\n}\r\nfunction getApi(url, options) {\r\n    return DefaultClient.getApi(url, options);\r\n}\r\nfunction api(url, options) {\r\n    return getApi(url, options);\r\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@prismicio/client/esm/@prismicio/client.mjs\n");

/***/ }),

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cross-fetch/dist/browser-ponyfill.js\n");

/***/ }),

/***/ "./src/pages/post/[slug].tsx":
/*!***********************************!*\
  !*** ./src/pages/post/[slug].tsx ***!
  \***********************************/
/*! exports provided: __N_SSG, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__N_SSG\", function() { return __N_SSG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Post; });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _prismicio_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prismicio/client */ \"./node_modules/@prismicio/client/esm/@prismicio/client.mjs\");\n/* harmony import */ var _post_module_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./post.module.scss */ \"./src/pages/post/post.module.scss\");\n/* harmony import */ var _post_module_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_post_module_scss__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/Header */ \"./src/components/Header/index.tsx\");\n/* harmony import */ var react_icons_fi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-icons/fi */ \"./node_modules/react-icons/fi/index.esm.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/index.js\");\n/* harmony import */ var date_fns_locale_pt_BR__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/locale/pt-BR */ \"./node_modules/date-fns/esm/locale/pt-BR/index.js\");\n/* harmony import */ var prismic_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prismic-dom */ \"./node_modules/prismic-dom/dist/prismic-dom.min.js\");\n/* harmony import */ var prismic_dom__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prismic_dom__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\nvar _jsxFileName = \"/home/marlon/projetos/Ignite/03-NEXT/desafio/ignite-blog/src/pages/post/[slug].tsx\",\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nvar __N_SSG = true;\nfunction Post(_ref) {\n  _s();\n\n  var _this = this;\n\n  var post = _ref.post;\n  console.log({\n    post: post\n  });\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_8__[\"useState\"])(0),\n      timeToRead = _useState[0],\n      setTimeToRead = _useState[1];\n\n  Object(react__WEBPACK_IMPORTED_MODULE_8__[\"useEffect\"])(function () {\n    if (post) {\n      var contentText = _prismicio_client__WEBPACK_IMPORTED_MODULE_1__[\"default\"].RichText.asText(post.data.content);\n      console.log(contentText);\n    }\n  }, [post]);\n\n  if (!post) {\n    return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"h1\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(_components_Header__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"img\", {\n      className: _post_module_scss__WEBPACK_IMPORTED_MODULE_2___default.a.banner,\n      src: post.data.banner.url,\n      alt: \"banner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"main\", {\n      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"h1\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n        className: _post_module_scss__WEBPACK_IMPORTED_MODULE_2___default.a.info,\n        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"time\", {\n          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__[\"FiCalendar\"], {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), Object(date_fns__WEBPACK_IMPORTED_MODULE_5__[\"format\"])(new Date(post.first_publication_date), 'dd LLL yyyy', {\n            locale: date_fns_locale_pt_BR__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"span\", {\n          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__[\"FiUser\"], {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), post.data.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"span\", {\n          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__[\"FiClock\"], {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), \"4 min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), post.data.content.map(function (content, index) {\n        return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"h1\", {\n            children: content.heading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n            className: _post_module_scss__WEBPACK_IMPORTED_MODULE_2___default.a.postContent,\n            dangerouslySetInnerHTML: {\n              __html: prismic_dom__WEBPACK_IMPORTED_MODULE_7__[\"RichText\"].asHtml(content.body)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, _this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Post, \"uZGyQ55GRxuJojW8xSttzkUKAmY=\");\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3BhZ2VzL3Bvc3QvW3NsdWddLnRzeD80NjczIl0sIm5hbWVzIjpbIlBvc3QiLCJwb3N0IiwiY29uc29sZSIsImxvZyIsInVzZVN0YXRlIiwidGltZVRvUmVhZCIsInNldFRpbWVUb1JlYWQiLCJ1c2VFZmZlY3QiLCJjb250ZW50VGV4dCIsIlByaXNtaWMiLCJSaWNoVGV4dCIsImFzVGV4dCIsImRhdGEiLCJjb250ZW50Iiwic3R5bGVzIiwiYmFubmVyIiwidXJsIiwidGl0bGUiLCJpbmZvIiwiZm9ybWF0IiwiRGF0ZSIsImZpcnN0X3B1YmxpY2F0aW9uX2RhdGUiLCJsb2NhbGUiLCJwdEJSIiwiYXV0aG9yIiwibWFwIiwiaW5kZXgiLCJoZWFkaW5nIiwicG9zdENvbnRlbnQiLCJfX2h0bWwiLCJhc0h0bWwiLCJib2R5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUF1QmUsU0FBU0EsSUFBVCxPQUFtQztBQUFBOztBQUFBOztBQUFBLE1BQW5CQyxJQUFtQixRQUFuQkEsSUFBbUI7QUFDaERDLFNBQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUVGLFFBQUksRUFBSkE7QUFBRixHQUFaOztBQURnRCxrQkFFWkcsc0RBQVEsQ0FBQyxDQUFELENBRkk7QUFBQSxNQUV6Q0MsVUFGeUM7QUFBQSxNQUU3QkMsYUFGNkI7O0FBR2hEQyx5REFBUyxDQUFDLFlBQU07QUFDZCxRQUFJTixJQUFKLEVBQVU7QUFDUixVQUFNTyxXQUFXLEdBQUdDLHlEQUFPLENBQUNDLFFBQVIsQ0FBaUJDLE1BQWpCLENBQXdCVixJQUFJLENBQUNXLElBQUwsQ0FBVUMsT0FBbEMsQ0FBcEI7QUFDQVgsYUFBTyxDQUFDQyxHQUFSLENBQVlLLFdBQVo7QUFDRDtBQUNGLEdBTFEsRUFLTixDQUFDUCxJQUFELENBTE0sQ0FBVDs7QUFPQSxNQUFJLENBQUNBLElBQUwsRUFBVztBQUNULHdCQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQVA7QUFDRDs7QUFFRCxzQkFDRTtBQUFBLDRCQUNFLHFFQUFDLDBEQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFERixlQUVFO0FBQUssZUFBUyxFQUFFYSx3REFBTSxDQUFDQyxNQUF2QjtBQUErQixTQUFHLEVBQUVkLElBQUksQ0FBQ1csSUFBTCxDQUFVRyxNQUFWLENBQWlCQyxHQUFyRDtBQUEwRCxTQUFHLEVBQUM7QUFBOUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUZGLGVBR0U7QUFBQSw4QkFDRTtBQUFBLGtCQUFLZixJQUFJLENBQUNXLElBQUwsQ0FBVUs7QUFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBLGNBREYsZUFFRTtBQUFLLGlCQUFTLEVBQUVILHdEQUFNLENBQUNJLElBQXZCO0FBQUEsZ0NBQ0U7QUFBQSxrQ0FDRSxxRUFBQyx5REFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLGtCQURGLEVBRUdDLHVEQUFNLENBQUMsSUFBSUMsSUFBSixDQUFTbkIsSUFBSSxDQUFDb0Isc0JBQWQsQ0FBRCxFQUF3QyxhQUF4QyxFQUF1RDtBQUM1REMsa0JBQU0sRUFBRUMsNkRBQUlBO0FBRGdELFdBQXZELENBRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQURGLGVBT0U7QUFBQSxrQ0FDRSxxRUFBQyxxREFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLGtCQURGLEVBRUd0QixJQUFJLENBQUNXLElBQUwsQ0FBVVksTUFGYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0JBUEYsZUFXRTtBQUFBLGtDQUNFLHFFQUFDLHNEQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0JBREY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQVhGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxjQUZGLEVBaUJHdkIsSUFBSSxDQUFDVyxJQUFMLENBQVVDLE9BQVYsQ0FBa0JZLEdBQWxCLENBQXNCLFVBQUNaLE9BQUQsRUFBVWEsS0FBVixFQUFvQjtBQUN6Qyw0QkFDRTtBQUFBLGtDQUNFO0FBQUEsc0JBQUtiLE9BQU8sQ0FBQ2M7QUFBYjtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQURGLGVBRUU7QUFDRSxxQkFBUyxFQUFFYix3REFBTSxDQUFDYyxXQURwQjtBQUVFLG1DQUF1QixFQUFFO0FBQ3ZCQyxvQkFBTSxFQUFFbkIsb0RBQVEsQ0FBQ29CLE1BQVQsQ0FBZ0JqQixPQUFPLENBQUNrQixJQUF4QjtBQURlO0FBRjNCO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBRkY7QUFBQSxXQUFVTCxLQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBREY7QUFXRCxPQVpBLENBakJIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUhGO0FBQUEsa0JBREY7QUFxQ0Q7O0dBbkR1QjFCLEk7O0tBQUFBLEkiLCJmaWxlIjoiLi9zcmMvcGFnZXMvcG9zdC9bc2x1Z10udHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2V0U3RhdGljUGF0aHMsIEdldFN0YXRpY1Byb3BzIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcic7XG5pbXBvcnQgUHJpc21pYyBmcm9tICdAcHJpc21pY2lvL2NsaWVudCc7XG5cbmltcG9ydCB7IGdldFByaXNtaWNDbGllbnQgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wcmlzbWljJztcblxuaW1wb3J0IGNvbW1vblN0eWxlcyBmcm9tICcuLi8uLi9zdHlsZXMvY29tbW9uLm1vZHVsZS5zY3NzJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9wb3N0Lm1vZHVsZS5zY3NzJztcblxuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi9jb21wb25lbnRzL0hlYWRlcic7XG5pbXBvcnQgeyBGaUNhbGVuZGFyLCBGaUNsb2NrLCBGaVVzZXIgfSBmcm9tICdyZWFjdC1pY29ucy9maSc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgcHRCUiBmcm9tICdkYXRlLWZucy9sb2NhbGUvcHQtQlInO1xuaW1wb3J0IHsgUmljaFRleHQgfSBmcm9tICdwcmlzbWljLWRvbSc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUG9zdCB7XG4gIGZpcnN0X3B1YmxpY2F0aW9uX2RhdGU6IHN0cmluZyB8IG51bGw7XG4gIGRhdGE6IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGJhbm5lcjoge1xuICAgICAgdXJsOiBzdHJpbmc7XG4gICAgfTtcbiAgICBhdXRob3I6IHN0cmluZztcbiAgICBjb250ZW50OiB7XG4gICAgICBoZWFkaW5nOiBzdHJpbmc7XG4gICAgICBib2R5OiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgIH1bXTtcbiAgICB9W107XG4gIH07XG59XG5cbmludGVyZmFjZSBQb3N0UHJvcHMge1xuICBwb3N0OiBQb3N0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3N0KHsgcG9zdCB9OiBQb3N0UHJvcHMpIHtcbiAgY29uc29sZS5sb2coeyBwb3N0IH0pO1xuICBjb25zdCBbdGltZVRvUmVhZCwgc2V0VGltZVRvUmVhZF0gPSB1c2VTdGF0ZSgwKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9zdCkge1xuICAgICAgY29uc3QgY29udGVudFRleHQgPSBQcmlzbWljLlJpY2hUZXh0LmFzVGV4dChwb3N0LmRhdGEuY29udGVudCk7XG4gICAgICBjb25zb2xlLmxvZyhjb250ZW50VGV4dCk7XG4gICAgfVxuICB9LCBbcG9zdF0pO1xuXG4gIGlmICghcG9zdCkge1xuICAgIHJldHVybiA8aDE+Q2FycmVnYW5kby4uLjwvaDE+O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWRlciAvPlxuICAgICAgPGltZyBjbGFzc05hbWU9e3N0eWxlcy5iYW5uZXJ9IHNyYz17cG9zdC5kYXRhLmJhbm5lci51cmx9IGFsdD1cImJhbm5lclwiIC8+XG4gICAgICA8bWFpbj5cbiAgICAgICAgPGgxPntwb3N0LmRhdGEudGl0bGV9PC9oMT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pbmZvfT5cbiAgICAgICAgICA8dGltZT5cbiAgICAgICAgICAgIDxGaUNhbGVuZGFyIC8+XG4gICAgICAgICAgICB7Zm9ybWF0KG5ldyBEYXRlKHBvc3QuZmlyc3RfcHVibGljYXRpb25fZGF0ZSksICdkZCBMTEwgeXl5eScsIHtcbiAgICAgICAgICAgICAgbG9jYWxlOiBwdEJSLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC90aW1lPlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPEZpVXNlciAvPlxuICAgICAgICAgICAge3Bvc3QuZGF0YS5hdXRob3J9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPEZpQ2xvY2sgLz40IG1pblxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtwb3N0LmRhdGEuY29udGVudC5tYXAoKGNvbnRlbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgIDxoMT57Y29udGVudC5oZWFkaW5nfTwvaDE+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5wb3N0Q29udGVudH1cbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICAgICAgX19odG1sOiBSaWNoVGV4dC5hc0h0bWwoY29udGVudC5ib2R5KSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvbWFpbj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN0YXRpY1BhdGhzOiBHZXRTdGF0aWNQYXRocyA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgcHJpc21pYyA9IGdldFByaXNtaWNDbGllbnQoKTtcbiAgY29uc3QgcG9zdHMgPSBhd2FpdCBwcmlzbWljLnF1ZXJ5KFxuICAgIFtQcmlzbWljLnByZWRpY2F0ZXMuYXQoJ2RvY3VtZW50LnR5cGUnLCAncG9zdCcpXSxcbiAgICB7IHBhZ2VTaXplOiAxIH1cbiAgKTtcbiAgY29uc29sZS5sb2cocG9zdHMpO1xuXG4gIGNvbnN0IHBhdGhzID0gcG9zdHMucmVzdWx0cy5tYXAoaXRlbSA9PiB7XG4gICAgcmV0dXJuIHsgcGFyYW1zOiB7IHNsdWc6IGl0ZW0udWlkIH0gfTtcbiAgfSk7XG4gIGNvbnNvbGUubG9nKHBhdGhzKTtcblxuICByZXR1cm4geyBwYXRocywgZmFsbGJhY2s6IHRydWUgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wczogR2V0U3RhdGljUHJvcHMgPSBhc3luYyAoeyBwYXJhbXMgfSkgPT4ge1xuICBjb25zdCB7IHNsdWcgfSA9IHBhcmFtcztcbiAgY29uc3QgcHJpc21pYyA9IGdldFByaXNtaWNDbGllbnQoKTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcmlzbWljLmdldEJ5VUlEKCdwb3N0JywgU3RyaW5nKHNsdWcpLCB7fSk7XG4gIGNvbnN0IHBvc3QgPSB7XG4gICAgZGF0YToge1xuICAgICAgdGl0bGU6IHJlc3BvbnNlLmRhdGEudGl0bGUsXG4gICAgICBiYW5uZXI6IHtcbiAgICAgICAgdXJsOiByZXNwb25zZS5kYXRhLmJhbm5lci51cmwsXG4gICAgICB9LFxuICAgICAgYXV0aG9yOiByZXNwb25zZS5kYXRhLmF1dGhvcixcbiAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlLmRhdGEuY29udGVudC5tYXAoY29udCA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaGVhZGluZzogY29udC5oZWFkaW5nLFxuICAgICAgICAgIGJvZHk6IGNvbnQuYm9keSxcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgIH0sXG4gICAgZmlyc3RfcHVibGljYXRpb25fZGF0ZTogcmVzcG9uc2UuZmlyc3RfcHVibGljYXRpb25fZGF0ZSxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBwcm9wczoge1xuICAgICAgcG9zdCxcbiAgICB9LFxuICB9O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pages/post/[slug].tsx\n");

/***/ })

})